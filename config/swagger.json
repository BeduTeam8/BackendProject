{
  "openapi": "3.0.3",
  "info": {
    "title": "Libraryverse",
    "description": "Welcome to BEDU Team 6 Book API!",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000/",
      "description": "LocalSqlite server"
    },
    {
      "url": "http://localhost:5668/",
      "description": "Local Postgress server"
    },
    {
      "url": "https://libroverse-production.up.railway.app/",
      "description": "railway server"
    }
  ],
  "tags": [
    {
      "name": "Home",
      "description": "Home page for Libroverse"
    },
    {
      "name": "Users",
      "description": "Users API"
    },
    {
      "name": "Categories",
      "description": "Categories API"
    },
    {
      "name": "Editorials",
      "description": "Editorials API"
    },
    {
      "name": "Books",
      "description": "Books API"
    },
    {
      "name": "Libraries",
      "description": "Libraries API"
    },
    {
      "name": "Roles",
      "description": "Roles API for all the users"
    },
    {
      "name": "User Filters",
      "description": "User Filters API"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Home"
        ],
        "summary": "Home",
        "description": "Home",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Home",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "info": {
                      "type": "string",
                      "example": "Welcome to the library universe. It is a place where everyone can learn, read and be creative.There are several different categories, from the sciences to fiction. There is no clear order of priority for books; you can begin your search with whichever you feel is most relevant and work your way around from there. The Libraryverse is yours to explore"
                    }
                  },
                  "required": [
                    "info"
                  ],
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "info": {
                      "type": "string",
                      "example": "Welcome to the library universe. It is a place where everyone can learn, read and be creative.There are several different categories, from the sciences to fiction. There is no clear order of priority for books; you can begin your search with whichever you feel is most relevant and work your way around from there. The Libraryverse is yours to explore"
                    }
                  },
                  "required": [
                    "info"
                  ],
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Not found"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Not found"
                    }
                  },
                  "required": [
                    "error"
                  ],
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "undocumented": {
            "description": "failed to fetch, solution change server o npm start server",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch. Possible Reasons:"
                    },
                    "reasons": {
                      "type": "array",
                      "example": [
                        "Server is not running",
                        "Server is running but not in the port 3000",
                        "Server is running but not in the port 3000 and the port is not available"
                      ],
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error",
                    "reasons"
                  ],
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch. Possible Reasons:"
                    },
                    "reasons": {
                      "type": "array",
                      "example": [
                        "Server is not running",
                        "Server is running but not in the port 3000",
                        "Server is running but not in the port 3000 and the port is not available"
                      ],
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error",
                    "reasons"
                  ],
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users",
        "description": "API to get all users",
        "parameters": [],
        "responses": {
          "200": {
            "description": "all users successfully obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Jhon Doe"
                    },
                    "age": {
                      "type": "number",
                      "example": 29
                    },
                    "about": {
                      "type": "string",
                      "example": ""
                    }
                  },
                  "required": [
                    "name",
                    "age"
                  ],
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Jhon Doe"
                    },
                    "age": {
                      "type": "number",
                      "example": 29
                    },
                    "about": {
                      "type": "string",
                      "example": ""
                    }
                  },
                  "required": [
                    "name",
                    "age"
                  ],
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/id/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by ID",
        "description": "API to get user based on user ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID that will be search",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user",
        "description": "API to update user based on user ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID that will be updated",
            "example": 1
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "User data that will be updated",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Jhon Doe"
                },
                "age": {
                  "type": "number",
                  "example": 29
                },
                "about": {
                  "type": "string",
                  "example": ""
                }
              },
              "required": [
                "name",
                "age"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully updated."
          },
          "400": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user",
        "description": "API to delete user based on user ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID that will be deleted",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully deleted."
          },
          "400": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/signUp": {
      "post": {
        "tags": [
          "Users Actions"
        ],
        "summary": "Sign up",
        "description": "API to sign up",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User successfully created."
          },
          "400": {
            "description": "01 Missing info Error. | 02 First and last name missing | 03 Validation Error | 04 Unique constraint Error | 05 Foreign Key Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "01-message": {
                      "type": "string",
                      "example": "Content can not be empty!"
                    },
                    "02-message": {
                      "type": "string",
                      "example": "First and last name missing"
                    },
                    "03-message": {
                      "type": "string",
                      "example": "Validation Error"
                    },
                    "04-message": {
                      "type": "string",
                      "example": "Unique constraint Error"
                    },
                    "05-message": {
                      "type": "string",
                      "example": "Foreign Key Error"
                    },
          "500": {
            "description": "Internal Server Error"
          }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "01-message": {
                      "type": "string",
                      "example": "Content can not be empty!"
                    },
                    "02-message": {
                      "type": "string",
                      "example": "First and last name missing"
                    },
                    "03-message": {
                      "type": "string",
                      "example": "Validation Error"
                    },
                    "04-message": {
                      "type": "string",
                      "example": "Unique constraint Error"
                    },
                    "05-message": {
                      "type": "string",
                      "example": "Foreign Key Error"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "in": "body",
          "required": true,
          "type": "object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          }
        }
      }
    },
    "/users/search/atributos": {
      "get": {
        "tags": [
          "User Filters"
        ],
        "summary": "Search user by attributes",
        "description": "API to search user based on attributes",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "User data that will be search",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Jhon Doe"
                },
                "age": {
                  "type": "number",
                  "example": 29
                }
              },
              "required": [
                "name",
                "age"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully obtained."
          },
          "400": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/search/rol/{rol}": {
      "get": {
        "tags": [
          "User Filters"
        ],
        "description": "",
        "parameters": [
          {
            "name": "rol",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/users/logIn": {
      "post": {
        "tags": [
          "Users Actions"
        ],
        "summary": "Log in",
        "description": "API to log in",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User successfully logged in."
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "in": "body",
          "required": true,
          "type": "object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          }
        }
      }
    },
    "/category/": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all Categories",
        "description": "API to get all Categories",
        "parameters": [],
        "responses": {
          "200": {
            "description": "all Categories successfully obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "1"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "1"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create a new Category",
        "description": "API to create a new Category",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "requestBody": {
          "description": "Category",
          "required": true,
          "type": "object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Categories"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Categories"
              }
            }
          }
        }
      }
    },
    "/category/id/{genre}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get Categorie by Genre",
        "description": "API to get Categorie based on Genre",
        "parameters": [
          {
            "name": "genre",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Genre that will be search",
            "example": "action"
          }
        ],
        "responses": {
          "200": {
            "description": "Category successfully obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "genre": {
                      "type": "string",
                      "example": "action"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "genre": {
                      "type": "string",
                      "example": "action"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Category not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Category not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Category not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "patch": {
        "tags": [
          "Categories"
        ],
        "summary": "Update a Categories",
        "description": "API to update a Category",
        "parameters": [
          {
            "name": "genre",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Genre that will be updated",
            "example": "action"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "requestBody": {
          "description": "Category",
          "required": true,
          "type": "object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Categories"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Categories"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Delete Category by Genre",
        "description": "API to delete Category based on Genre",
        "parameters": [
          {
            "name": "genre",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "genre that will be deleted",
            "example": "action"
          }
        ],
        "responses": {
          "200": {
            "description": "Category successfully deleted."
          },
          "400": {
            "description": "Category not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Category not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Category not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/editorial/": {
      "get": {
        "tags": [
          "Editorials"
        ],
        "summary": "Get all Editorials",
        "description": "API to get all Editorials",
        "parameters": [],
        "responses": {
          "200": {
            "description": "all Editorials successfully obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "1"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "1"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "tags": [
          "Editorials"
        ],
        "summary": "Create a new Editorial",
        "description": "API to create a new Editorial",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "requestBody": {
          "description": "Editorial",
          "required": true,
          "type": "object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Editorials"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Editorials"
              }
            }
          }
        }
      }
    },
    "/editorial/id/{name}": {
      "get": {
        "tags": [
          "Editorials"
        ],
        "summary": "Get Editorial by ID",
        "description": "API to get Editorial based on Editorial ID",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Editorial ID that will be search",
            "example": 1,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Editorial successfully obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Editorial not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Editorial not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Editorial not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "patch": {
        "tags": [
          "Editorials"
        ],
        "summary": "Update an Editorial",
        "description": "API to update a Role",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Editorial ID that will be updated",
            "example": 1,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "requestBody": {
          "description": "Editorial",
          "required": true,
          "type": "object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Editorials"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Editorials"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Editorials"
        ],
        "summary": "Delete Editorial by ID",
        "description": "API to delete Editorial based on Editorial ID",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Editorial ID that will be deleted",
            "example": 1,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Editorial successfully deleted."
          },
          "400": {
            "description": "Editorial not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Editorial not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Editorial not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/book/": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Get all Books",
        "description": "API to get all Books",
        "parameters": [],
        "responses": {
          "200": {
            "description": "all Books successfully obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "1"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "1"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "tags": [
          "Books"
        ],
        "summary": "Create a new Book",
        "description": "API to create a new Book",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "requestBody": {
          "description": "Book",
          "required": true,
          "type": "object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Books"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Books"
              }
            }
          }
        }
      }
    },
    "/book/id/{id}": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Get Book by ID",
        "description": "API to get Book based on Book ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Book ID that will be search",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Role successfully obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Book not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Book not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Book not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "patch": {
        "tags": [
          "Books"
        ],
        "summary": "Update a Book",
        "description": "API to update a Book",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Book ID that will be updated",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "requestBody": {
          "description": "Book",
          "required": true,
          "type": "object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Books"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Books"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Books"
        ],
        "summary": "Delete Book by ID",
        "description": "API to delete Book based on Book ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Book ID that will be deleted",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Book successfully deleted."
          },
          "400": {
            "description": "Book not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Book not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Book not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/library/": {
      "get": {
        "tags": [
          "Library"
        ],
        "summary": "Get all Libraries",
        "description": "API to get all Libraries",
        "parameters": [],
        "responses": {
          "200": {
            "description": "all Libraries successfully obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "1"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "1"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/library/id/{id}": {
      "get": {
        "tags": [
          "Libraries"
        ],
        "summary": "Get Library by ID",
        "description": "API to get Library based on Library ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Library ID that will be search",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Library successfully obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Library not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Library not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Library not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Libraries"
        ],
        "summary": "Update a Library",
        "description": "API to update a Library",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Library ID that will be updated",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "requestBody": {
          "description": "Library",
          "required": true,
          "type": "object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Library"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Library"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Libraries"
        ],
        "summary": "Delete Library by ID",
        "description": "API to delete Library based on Library ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Library ID that will be deleted",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Library successfully deleted."
          },
          "400": {
            "description": "Library not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Library not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Library not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/library/create": {
      "post": {
        "tags": [
          "Libraries"
        ],
        "summary": "Create a new Library",
        "description": "API to create a new Library",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "requestBody": {
          "description": "Library",
          "required": true,
          "type": "object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Library"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Library"
              }
            }
          }
        }
      }
    },
    "/rol/": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get all Roles",
        "description": "API to get all Roles",
        "parameters": [],
        "responses": {
          "200": {
            "description": "all Roles successfully obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "1"
                    },
                    "rol": {
                      "type": "string",
                      "example": "admin"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "1"
                    },
                    "rol": {
                      "type": "string",
                      "example": "admin"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Create a new Role",
        "description": "API to create a new Role",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "requestBody": {
          "description": "Rol",
          "required": true,
          "type": "object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roles"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Roles"
              }
            }
          }
        }
      }
    },
    "/rol/{id}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get Role by ID",
        "description": "API to get Role based on Role ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Role ID that will be search",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Role successfully obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Role not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Role not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Role not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Update a Role",
        "description": "API to update a Role",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Role ID that will be updated",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "requestBody": {
          "description": "Rol",
          "required": true,
          "type": "object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roles"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Roles"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete Role by ID",
        "description": "API to delete Role based on Role ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Role ID that will be deleted",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Role successfully deleted."
          },
          "400": {
            "description": "Role not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Role not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Role not found."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Roles": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "2"
          },
          "rol": {
            "type": "string",
            "example": "user"
          }
        },
        "xml": {
          "name": "Roles"
        }
      },
      "Users": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "kingofthenorth"
          },
          "userpass": {
            "type": "string",
            "example": "123456"
          },
          "firstname": {
            "type": "string",
            "example": "jon"
          },
          "lastname": {
            "type": "string",
            "example": "snow"
          },
          "address": {
            "type": "string",
            "example": "123 winderfell"
          },
          "email": {
            "type": "string",
            "example": "winter@fell.com"
          },
          "phonenumber": {
            "type": "string",
            "example": "1234567890"
          },
          "rol": {
            "type": "string",
            "example": "2"
          }
        },
        "xml": {
          "name": "Users"
        }
      },
      "Library": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "King's Landing"
          },
          "description": {
            "type": "string",
            "example": "The capital of the seven kingdoms"
          }
        },
        "xml": {
          "name": "Library"
        }
      },
      "Book": {
        "type": "object",
        "properties": {
          "book_name": {
            "type": "string",
            "example": "A Game of thrones"
          },
          "author": {
            "type": "string",
            "example": "George RR martin"
          },
          "description": {
            "type": "string",
            "example": "a song of ice and fire"
          },
          "publication_date": {
            "type": "string",
            "example": "1996"
          },
          "category": {
            "type": "string",
            "example": "fantasy"
          }
        },
        "xml": {
          "name": "Book"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "genre": {
            "type": "string",
            "example": "fantasy"
          },
          "description": {
            "type": "string",
            "example": "a genre of fiction"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "Login": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "kingofthenorth"
          },
          "userpass": {
            "type": "string",
            "example": "12345"
          }
        },
        "xml": {
          "name": "Login"
        }
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}